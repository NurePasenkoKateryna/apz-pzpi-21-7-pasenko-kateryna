1 UML ДІАГРАМА ПРЕЦЕНДЕНТІВ

Програмна система «FunMeet» має 2 ролі користувачів: адміністратор та звичайний користувач.
Взаємодію користувачів з програмною системою представлено на діаграмі прецендентів (див. рис. 1.1). За діаграмою була визначена функціональність та взаємодія користувачів за ролями з системою.
Отже, ми розробили діаграму прецедентів, яка відображає взаємодію між користувачами та системою.
 
2 UML ДІАГРАМА КОМПОНЕНТІВ

Для розробки діаграми компонентів (див. рис. 2.1) були виділені наступні компоненти:
-	Meetings – відображення зустрічей;
-	Themes – відображення тем;
-	ExportMeeting – експорт всіх зустрічей;
-	ExportTheme – експорт всіх тем;
-	RegisterMeeting – реєстрація на зустріч.
Отже, ми розробили UML діаграму компонентів, яка демонструє архітектуру програмної системи та взаємодію її компонентів.
 
3 UML ДІАГРАМА ПАКЕТІВ

Для структури програмної системи було виділено пакети. Зв’язки між пакетами можна побачити на діаграмі пакетів (див. рис. 3.1). 
Було виділено такі пакети:
-	Public – пакет з файлами публічного доступу;
-	SRC – пакет з вихідним кодом програми;
-	Styles – пакет зі стилями ;
-	Node_modul – пакeт зі сторонями бібліотеками та модулями;
-	Assets – пакет з медіафайлами;
-	Components – пакет з архітектурою веб-сайту.
Отже, ми розробили UML діаграму пакетів, яка відображає зв’язки між пакетами та самі пакети, які використовуються.
 
4 UML ДІАГРАМА СТАНІВ

Для розробки клієнтської частини була створена UML діаграма станів (див. рис. 4.1).
Були виділені такі функцій та інтерфейс, які надає клієнтська частина:
-	Форма авторизації: інтерфейс для авторизації користувача;
-	Форма реєстрації: інтерфейс для реєстрації користувача;
-	Управління зустрічами: інтерфейс для створення, видалення, редагування та експорта зустрічей;
-	Управління темами: інтерфейс для створення, видалення, редагування та експорта тем;
-	Управління профілем: інтерфейс для редагування профілю;
-	Реєстрація на зустріч: інтерфейс для реєстрації на зустріч.
Отже, ми створили UML діаграму станів, щоб відобразити поведінку клієнтської частини в залежності від поточного стану.
 
5 РОЗРОБКА КЛІЄНТСЬКОЇ ЧАСТИНИ

Для розробки клієнтської частини була обрана бібліотека ReactJS. Як інтегроване середовище розробки було обрано WebStorm від JetBrains.
Клієнтська частина надає графічний інтерфейс для відображення бізнес логіки.
-	Експортування даних про зустрічі та теми: на сторінках з переліком зустрічі або теми, адміністратор може натиснути кнопку «Експортувати всі зустрічі/теми». Він може обрати куди зберегти файл в форматі таблиці Excel.
-	Відображення створених зустрічей, можливість їх редагувати та видаляти.
-	Реєстрація на зустрічі: обравши потрібну зустріч, користувач натискає на «Зареєструватися на зустріч» і підтвердивши запис, отримає QR-код.
-	Відображення створених тем, можливість їх редагувати та видаляти.
Відповідно до вимог локалізації, інтерфейс веб-сайту було перекладено українською та англійською мовами за допомогою бібліотеки «react-i18next».
Відповідно до вимог захисту даних, паролі користувачів не відображаються при перегляді всієї інформації про користувачів. При авторизації кожен користувач отримує власний токен доступу. Це надає можливість користувачу мати доступи лише до власних даних.
 
ВИСНОВКИ

У ході виконання лабораторної роботи були отриманні навички з проектування клієнтської частини програмної системи, створення діаграм станів, прецедентів, пакетів та компонентів. Була розроблена програмна реалізація клієнтської частини. При розробці продукту було дотримано вимоги Code Convention для мови програмування JavaScript.
