1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ

Користувачі програмної системи поділяються на 2 типи: користувач та адміністратор.
Взаємодію між акторами та системою продемонстровано на діаграмі прецедентів (див. рис. 1). 
За допомогою діаграми було визначено список функцій для кожного актора та їх взаємодію з програмною системою. 

2 ПРОЄКТУВАННЯ БАЗИ ДАНИХ

Проєктування бази даних було проведено за допомогою розробки ER-моделі даних (див. рис. 2). Діаграма складається з 8 таблиць: гурти (bands), картки (cards), концертні організатори (concertorganizers), події (events), жанри (genres), місця (seats), квитки (tickets), користувачі (users).
Згідно діаграми можна виділити такі зв’язки між сутностями:
1.	Користувач – Квиток мають зв’язок один до багатьох. У одного користувача може бути багато квитків.
2.	Користувач – Карта мають зв’язок один до багатьох. Користувач може мати багато карт, але карта може мати одного користувача.
3.	Гурт – Жанр мають зв’язок багато до одного. У одного жанру може бути багато гуртів, але гурт має один жанр.
4.	Гурт – Концертний організатор мають зв’язок багато до одного. У гурту може бути один концертний організатор, але у організатора може бути багато гуртів.
5.	Гурт – Подія мають зв’язок один до багатьох. У одного гурта може бути багато подій, але у події приймає участь один гурт.
6.	Гурт – Користувач мають зв’язок один до багатьох. У гурті може бути багато музикантів, але у користувача може бути один гурт.
7.	Подія – Жанр мають зв’язок багато до одного. Подія може належати до одного жанру, але жанр може включати багато подій.
8.	Подія – Місце мають зв’язок багато до одного. У події може бути багато місць, але місце належить одній події.
9.	Квиток – Подія мають зв’язок багато до одного. Квиток пов’язаний з однією подією.
10.	Квиток – Місце мають зв’язок багато до одного. Квиток має одне місце, але місце може мати багато квитків.
 
3 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ

Для розробки серверної частини програмної системи було обрано мову програмування JavaScript з використанням платформи NodeJS та фреймворку ExpressJS.
Для збереження даних було обрано NoSQL базу даних  MongoDB, яка забезпечує гнучкі схеми даних та сумісність з NodeJS. Підключення до бази даних відбувається за допомогою бібліотеки mongoose, яка дозволяє створювати прості схеми для моделювання даних.
Детально використані технології можна побачити на діаграмі розгортання (див. рис. 3).
Програмна система включає в себе п’ять вузла:
1.	Серверна частина: включає в себе реалізацію бізнес логіки, взаємодії зі смарт-девайсом і роботою з базою даних.
2.	Клієнтська частина: включає в себе реалізацію веб-сторінок з якими взаємодіє користувач, збереження та обробку даних і надсилання запитів на серверну частину.
3.	Смарт-девайс: включає в себе реалізацію датчику для зчитування QR-коду і надсилання отриманих даних на сервер.
4.	Мобільний застосунок: включає в себе реалізацію функціоналу взаємодії користувача з серверною частиною.
 
4 СПЕЦИФІКАЦІЯ REST

Даний проєкт містить в собі 31 кінцеву точку з яких складається REST API. Кожна кінцева точка містить в собі функціонал для виконання бізнес логіки.
Специфікація REST для кожної кінцевої точки наведена у таблиці 1.
Авторизація
| Кінцева точка                    | HTTP Метод  | Потрібна роль   | Опис                   
|----------------------------------|-------------|-----------------|--------------------------------
| /authorization/login             | POST        | Всі користувачі | Авторизація в обліковому записі 
| /authorization/registration      | POST        | Всі користувачі | Реєстрація облікового запису   
Гурт
| /band/                           | GET         | Всі користувачі | Отримання інформації про всі гурти 
| /band/:bandId                    | GET         | Адміністратор    | Отримання інформації про певний гурт 
| /band/create                     | POST        | Адміністратор    | Створення гурту                
| /band/:bandId                    | PATCH       | Адміністратор    | Редагування інформації про гурт
| /band/:bandId                    | DELETE      | Адміністратор    | Видалення певного гурта        
Картка
| /card/create                     | POST        | Користувач       | Створення картки               
| /card/:userId                    | GET         | Користувач       | Отримання картки для певного користувача
Подія
| /event/                          | GET         | Адміністратор    | Отримання інформації про всі події
| /event/:eventId                  | GET         | Адміністратор    | Отримання інформації про певну подію
| /event/create                    | POST        | Адміністратор    | Створення події               
| /event/:eventId                  | PATCH       | Адміністратор    | Редагування події              
| /event/:eventId                  | DELETE      | Адміністратор    | Видалення події                
Експорт
| /export/event                    | GET         | Адміністратор    | Експорт даних про всі події    
| /export/bands                    | GET         | Адміністратор    | Експорт даних про всі гурти    
| /export/users                    | GET         | Адміністратор    | Експорт даних про всіх користувачів 
Жанр
| /genre/                          | GET         | Всі користувачі | Отримання інформації про всі жанри 
| /genre/create                    | POST        | Адміністратор    | Створення нового жанру         
| /genre/:genreId                  | PATCH       | Адміністратор    | Редагування жанру              
| /genre/:genreId                  | DELETE      | Адміністратор    | Видалення жанру                
Місце
| /seat/:eventId/create            | POST        | Адміністратор    | Створення місця               
| /seat/:seatId                    | DELETE      | Адміністратор    | Видалення місця                
| /seat/:seatId                    | PATCH       | Адміністратор    | Редагування інформації про місце 
| /seat/:eventId                   | GET         | Адміністратор    | Отримання місць для певної події 
Квиток
| /ticket/buy                      | POST        | Користувач       | Створення квитка               
| /ticket/:userId                  | GET         | Користувач       | Отримання квитків для певного користувача 
Користувач
| /user/                           | GET         | Всі користувачі | Отримання інформації про всіх користувачів 
| /user/:userId                    | GET         | Всі користувачі | Отримання інформації про певного користувача 
| /user/:userId                    | PATCH       | Всі користувачі | Редагування інформації про користувача 
| /user/:userId                    | DELETE      | Всі користувачі | Видалення користувача          
За допомогою таблиці специфікації REST було визначено кінцеві точки які використовуються для запитів до серверної частини програмної системи. 

ВИСНОВКИ

Під час виконання лабораторної роботи були набуті навички з проектування серверної частини програмної системи, розробки діаграм розгортання та прецедентів. Була розроблена реалізація серверної частини. При розробці програмної системи було дотримано вимог до чистого коду мови програмування JavaScript.

